package main

// Import necessary packages

import (
	"log"
	"net"

	// pb is the alias for the protocol buffer package generated from the service definition
	// grpc is the package used to set up the gRPC server
	pb "github.com/ShubhKanodia/goCPRg.git/proto"
	"google.golang.org/grpc"
)

const (
	// The port on which the server will listen for incoming TCP connections
	port = ":8080"
)

// helloServer struct implements the GreetServiceServer interface generated by Protocol Buffers.
// It will handle the logic for the GreetService methods, like sayHello etc.
type helloServer struct {
	pb.GreetServiceServer
}

func main() {
	// The net package is used to establish network connections,
	// here it listens for incoming TCP connections on the specified port.
	lis, err := net.Listen("tcp", port)
	if err != nil {
		log.Fatalf("Failed to start the server: %v", err)
	}
	// Create a new gRPC server instance. This will handle all incoming gRPC requests.
	grpcServer := grpc.NewServer()

	// Register the helloServer as the handler for the GreetService.
	// The RegisterGreetServiceServer function links the service to the gRPC server.
	pb.RegisterGreetServiceServer(grpcServer, &helloServer{})

	log.Printf("Server started at %v", lis.Addr())

	// Start the gRPC server and begin handling incoming connections.
	// If an error occurs while serving the requests, it is logged and the program is terminated.
	if err := grpcServer.Serve(lis); err != nil {
		log.Fatalf("Failed to start: %v", err)
	}

}
